// vite.config.ts
import { defineConfig } from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/vite/dist/node/index.js";
import react from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/@vitejs/plugin-react/dist/index.mjs";
import dts from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/vite-plugin-dts/dist/index.mjs";
import { EsLinter, linterPlugin } from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/vite-plugin-linter/dist/index.mjs";
import tsConfigPaths from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/vite-tsconfig-paths/dist/index.mjs";
import copy from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/rollup-plugin-copy/dist/index.commonjs.js";
import { resolve } from "node:path";

// package.json
var peerDependencies = {
  react: "^18.2.0",
  "react-dom": "^18.2.0",
  "react-router-dom": "^6.20.1"
};

// vite.config.ts
var vite_config_default = defineConfig((configEnv) => ({
  plugins: [
    react(),
    tsConfigPaths(),
    linterPlugin({
      include: ["./src}/**/*.{ts,tsx}"],
      linters: [new EsLinter({ configEnv })]
    }),
    dts({
      include: ["src/lib/"]
    }),
    copy({
      targets: [{ src: "src/lib/constants/colors.scss", dest: "dist" }],
      hook: "writeBundle"
    })
  ],
  build: {
    lib: {
      entry: resolve("src", "lib/index.tsx"),
      name: "mylibrarycontainer",
      formats: ["es", "umd"],
      fileName: (format) => `mylibrarycontainer.${format}.js`
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies)]
    }
  }
}));
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRDpcXFxccHJvZmVzc2lvbmFsXFxcXGF0dGljYml0c1xcXFxmbG9kYVxcXFxyZWFjdCBwYWNrYWdlXFxcXG15bGlicmFyeWNvbnRhaW5lclxcXFxteWxpYnJhcnljb250YWluZXJcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkQ6XFxcXHByb2Zlc3Npb25hbFxcXFxhdHRpY2JpdHNcXFxcZmxvZGFcXFxccmVhY3QgcGFja2FnZVxcXFxteWxpYnJhcnljb250YWluZXJcXFxcbXlsaWJyYXJ5Y29udGFpbmVyXFxcXHZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9EOi9wcm9mZXNzaW9uYWwvYXR0aWNiaXRzL2Zsb2RhL3JlYWN0JTIwcGFja2FnZS9teWxpYnJhcnljb250YWluZXIvbXlsaWJyYXJ5Y29udGFpbmVyL3ZpdGUuY29uZmlnLnRzXCI7XHJcblxyXG5cclxuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcclxuaW1wb3J0IHJlYWN0IGZyb20gXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiO1xyXG5pbXBvcnQgZHRzIGZyb20gXCJ2aXRlLXBsdWdpbi1kdHNcIjtcclxuaW1wb3J0IHsgRXNMaW50ZXIsIGxpbnRlclBsdWdpbiB9ICBmcm9tIFwidml0ZS1wbHVnaW4tbGludGVyXCI7XHJcbmltcG9ydCB0c0NvbmZpZ1BhdGhzIGZyb20gXCJ2aXRlLXRzY29uZmlnLXBhdGhzXCI7XHJcbmltcG9ydCBjb3B5IGZyb20gXCJyb2xsdXAtcGx1Z2luLWNvcHlcIjtcclxuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gXCJub2RlOnBhdGhcIjtcclxuLy8gY29uc3QgPSBFc0xpbnQ7XHJcbmltcG9ydCAqIGFzIHBhY2thZ2VKc29uIGZyb20gXCIuL3BhY2thZ2UuanNvblwiO1xyXG5cclxuLy8gaHR0cHM6Ly92aXRlanMuZGV2L2NvbmZpZy9cclxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKChjb25maWdFbnYpID0+ICh7XHJcbiAgcGx1Z2luczogW1xyXG4gICAgcmVhY3QoKSxcclxuICAgIHRzQ29uZmlnUGF0aHMoKSxcclxuICAgIGxpbnRlclBsdWdpbih7XHJcbiAgICAgIGluY2x1ZGU6IFtcIi4vc3JjfS8qKi8qLnt0cyx0c3h9XCJdLFxyXG4gICAgICBsaW50ZXJzOiBbbmV3IEVzTGludGVyKHsgY29uZmlnRW52IH0pXSxcclxuICAgIH0pLFxyXG4gICAgZHRzKHtcclxuICAgICAgaW5jbHVkZTogW1wic3JjL2xpYi9cIl0sXHJcbiAgICB9KSxcclxuICAgIGNvcHkoe1xyXG4gICAgICB0YXJnZXRzOiBbeyBzcmM6IFwic3JjL2xpYi9jb25zdGFudHMvY29sb3JzLnNjc3NcIiwgZGVzdDogXCJkaXN0XCIgfV0sXHJcbiAgICAgIGhvb2s6ICd3cml0ZUJ1bmRsZSdcclxuICAgIH0pLFxyXG4gIF0sXHJcbiAgYnVpbGQ6IHtcclxuICAgIGxpYjoge1xyXG4gICAgICBlbnRyeTogcmVzb2x2ZShcInNyY1wiLCBcImxpYi9pbmRleC50c3hcIiksXHJcbiAgICAgIG5hbWU6IFwibXlsaWJyYXJ5Y29udGFpbmVyXCIsXHJcbiAgICAgIGZvcm1hdHM6IFtcImVzXCIsIFwidW1kXCJdLFxyXG4gICAgICBmaWxlTmFtZTogKGZvcm1hdCkgPT4gYG15bGlicmFyeWNvbnRhaW5lci4ke2Zvcm1hdH0uanNgLFxyXG4gICAgfSxcclxuICAgIHJvbGx1cE9wdGlvbnM6IHtcclxuICAgICAgZXh0ZXJuYWw6IFsuLi5PYmplY3Qua2V5cyhwYWNrYWdlSnNvbi5wZWVyRGVwZW5kZW5jaWVzKV0sXHJcbiAgICB9LFxyXG4gIH0sXHJcbn0pKTtcclxuIiwgIntcclxuICBcIm5hbWVcIjogXCJAc2h1YmhoYW1wZ2l0MDEvbXlsaWJyYXJ5Y29udGFpbmVyXCIsXHJcbiAgXCJ2ZXJzaW9uXCI6IFwiMC4xLjZcIixcclxuICBcInR5cGVcIjogXCJtb2R1bGVcIixcclxuICBcInB1Ymxpc2hDb25maWdcIjoge1xyXG4gICAgXCJAc2h1YmhoYW1wZ2l0MDE6cmVnaXN0cnlcIjogXCJodHRwczovL25wbS5wa2cuZ2l0aHViLmNvbVwiXHJcbiAgfSxcclxuICBcImZpbGVzXCI6IFtcclxuICAgIFwiZGlzdFwiLFxyXG4gICAgXCJSRUFETUUubWRcIlxyXG4gIF0sXHJcbiAgXCJtYWluXCI6IFwiLi9kaXN0L215bGlicmFyeWNvbnRhaW5lci51bWQuanNcIixcclxuICBcInN0eWxlXCI6IFwiLi9kaXN0L3N0eWxlLm1vZHVsZS5jc3NcIixcclxuICBcIm1vZHVsZVwiOiBcIi4vZGlzdC9teWxpYnJhcnljb250YWluZXIuZXMuanNcIixcclxuICBcInR5cGVzXCI6IFwiLi9kaXN0L2luZGV4LmQudHNcIixcclxuICBcImV4cG9ydHNcIjoge1xyXG4gICAgXCIuXCI6IHtcclxuICAgICAgXCJpbXBvcnRcIjogXCIuL2Rpc3QvbXlsaWJyYXJ5Y29udGFpbmVyLmVzLmpzXCIsXHJcbiAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC9teWxpYnJhcnljb250YWluZXIudW1kLmpzXCIsXHJcbiAgICAgIFwidHlwZXNcIjogXCIuL2Rpc3QvaW5kZXguZC50c1wiLFxyXG4gICAgICBcInN0eWxlXCI6IFwiLi9kaXN0L3N0eWxlLm1vZHVsZS5jc3NcIlxyXG4gICAgfSxcclxuICAgIFwiLi9kaXN0L3N0eWxlLmNzc1wiOiB7XHJcbiAgICAgIFwiaW1wb3J0XCI6IFwiLi9kaXN0L3N0eWxlLmNzc1wiLFxyXG4gICAgICBcInJlcXVpcmVcIjogXCIuL2Rpc3Qvc3R5bGUuY3NzXCJcclxuICAgIH0sXHJcbiAgICBcIi4vZGlzdC9jb2xvcnMuc2Nzc1wiOiB7XHJcbiAgICAgIFwiaW1wb3J0XCI6IFwiLi9kaXN0L2NvbG9ycy5zY3NzXCIsXHJcbiAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC9jb2xvcnMuc2Nzc1wiXHJcbiAgICB9XHJcbiAgfSxcclxuICBcInNjcmlwdHNcIjoge1xyXG4gICAgXCJkZXZcIjogXCJ2aXRlXCIsXHJcbiAgICBcImJ1aWxkXCI6IFwidHNjICYmIHZpdGUgYnVpbGRcIixcclxuICAgIFwibGludFwiOiBcImVzbGludCAuIC0tZXh0IHRzLHRzeCAtLXJlcG9ydC11bnVzZWQtZGlzYWJsZS1kaXJlY3RpdmVzIC0tbWF4LXdhcm5pbmdzIDBcIixcclxuICAgIFwicHJldmlld1wiOiBcInZpdGUgcHJldmlld1wiXHJcbiAgfSxcclxuICBcImRlcGVuZGVuY2llc1wiOiB7XHJcbiAgICBcInJlYWN0XCI6IFwiXjE4LjIuMFwiLFxyXG4gICAgXCJyZWFjdC1kb21cIjogXCJeMTguMi4wXCIsXHJcbiAgICBcInJlYWN0LXJvdXRlci1kb21cIjogXCJeNi4yMC4xXCIsXHJcbiAgICBcInNhc3NcIjogXCJeMS42OS41XCJcclxuICB9LFxyXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcclxuICAgIFwiQHR5cGVzL25vZGVcIjogXCJeMjAuMTAuNFwiLFxyXG4gICAgXCJAdHlwZXMvcmVhY3RcIjogXCJeMTguMi4zN1wiLFxyXG4gICAgXCJAdHlwZXMvcmVhY3QtZG9tXCI6IFwiXjE4LjIuMTVcIixcclxuICAgIFwiQHR5cGVzY3JpcHQtZXNsaW50L2VzbGludC1wbHVnaW5cIjogXCJeNi4xMC4wXCIsXHJcbiAgICBcIkB0eXBlc2NyaXB0LWVzbGludC9wYXJzZXJcIjogXCJeNi4xMC4wXCIsXHJcbiAgICBcIkB2aXRlanMvcGx1Z2luLXJlYWN0XCI6IFwiXjQuMy4xXCIsXHJcbiAgICBcImVzbGludFwiOiBcIl44LjUzLjBcIixcclxuICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdC1ob29rc1wiOiBcIl40LjYuMFwiLFxyXG4gICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0LXJlZnJlc2hcIjogXCJeMC40LjRcIixcclxuICAgIFwicm9sbHVwLXBsdWdpbi1jb3B5XCI6IFwiXjMuNS4wXCIsXHJcbiAgICBcInR5cGVzY3JpcHRcIjogXCJeNS4yLjJcIixcclxuICAgIFwidml0ZVwiOiBcIl41LjAuMFwiLFxyXG4gICAgXCJ2aXRlLXBsdWdpbi1kdHNcIjogXCJeMy45LjFcIixcclxuICAgIFwidml0ZS1wbHVnaW4tbGludGVyXCI6IFwiXjIuMS4xXCIsXHJcbiAgICBcInZpdGUtdHNjb25maWctcGF0aHNcIjogXCJeNC4zLjJcIlxyXG4gIH0sXHJcbiAgXCJwZWVyRGVwZW5kZW5jaWVzXCI6IHtcclxuICAgIFwicmVhY3RcIjogXCJeMTguMi4wXCIsXHJcbiAgICBcInJlYWN0LWRvbVwiOiBcIl4xOC4yLjBcIixcclxuICAgIFwicmVhY3Qtcm91dGVyLWRvbVwiOiBcIl42LjIwLjFcIlxyXG4gIH0sXHJcbiAgXCJyZXNvbHV0aW9uc1wiOiB7XHJcbiAgICBcIkB0eXBlcy9yZWFjdFwiOiBcIl4xOC4yLjM3XCIsXHJcbiAgICBcIkB0eXBlcy9yZWFjdC1kb21cIjogXCJeMTguMi4xNVwiXHJcbiAgfVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFHQSxTQUFTLG9CQUFvQjtBQUM3QixPQUFPLFdBQVc7QUFDbEIsT0FBTyxTQUFTO0FBQ2hCLFNBQVMsVUFBVSxvQkFBcUI7QUFDeEMsT0FBTyxtQkFBbUI7QUFDMUIsT0FBTyxVQUFVO0FBQ2pCLFNBQVMsZUFBZTs7O0FDbUR0Qix1QkFBb0I7QUFBQSxFQUNsQixPQUFTO0FBQUEsRUFDVCxhQUFhO0FBQUEsRUFDYixvQkFBb0I7QUFDdEI7OztBRGxERixJQUFPLHNCQUFRLGFBQWEsQ0FBQyxlQUFlO0FBQUEsRUFDMUMsU0FBUztBQUFBLElBQ1AsTUFBTTtBQUFBLElBQ04sY0FBYztBQUFBLElBQ2QsYUFBYTtBQUFBLE1BQ1gsU0FBUyxDQUFDLHNCQUFzQjtBQUFBLE1BQ2hDLFNBQVMsQ0FBQyxJQUFJLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUFBLElBQ3ZDLENBQUM7QUFBQSxJQUNELElBQUk7QUFBQSxNQUNGLFNBQVMsQ0FBQyxVQUFVO0FBQUEsSUFDdEIsQ0FBQztBQUFBLElBQ0QsS0FBSztBQUFBLE1BQ0gsU0FBUyxDQUFDLEVBQUUsS0FBSyxpQ0FBaUMsTUFBTSxPQUFPLENBQUM7QUFBQSxNQUNoRSxNQUFNO0FBQUEsSUFDUixDQUFDO0FBQUEsRUFDSDtBQUFBLEVBQ0EsT0FBTztBQUFBLElBQ0wsS0FBSztBQUFBLE1BQ0gsT0FBTyxRQUFRLE9BQU8sZUFBZTtBQUFBLE1BQ3JDLE1BQU07QUFBQSxNQUNOLFNBQVMsQ0FBQyxNQUFNLEtBQUs7QUFBQSxNQUNyQixVQUFVLENBQUMsV0FBVyxzQkFBc0IsTUFBTTtBQUFBLElBQ3BEO0FBQUEsSUFDQSxlQUFlO0FBQUEsTUFDYixVQUFVLENBQUMsR0FBRyxPQUFPLEtBQWlCLGdCQUFnQixDQUFDO0FBQUEsSUFDekQ7QUFBQSxFQUNGO0FBQ0YsRUFBRTsiLAogICJuYW1lcyI6IFtdCn0K
