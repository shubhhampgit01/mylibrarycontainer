// vite.config.ts
import { defineConfig } from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/vite/dist/node/index.js";
import react from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/@vitejs/plugin-react/dist/index.mjs";
import dts from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/vite-plugin-dts/dist/index.mjs";
import { EsLinter, linterPlugin } from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/vite-plugin-linter/dist/index.mjs";
import tsConfigPaths from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/vite-tsconfig-paths/dist/index.mjs";
import copy from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/rollup-plugin-copy/dist/index.commonjs.js";
import { resolve } from "node:path";

// package.json
var peerDependencies = {
  react: "^18.2.0",
  "react-dom": "^18.2.0",
  "react-router-dom": "^6.20.1"
};

// vite.config.ts
var vite_config_default = defineConfig((configEnv) => ({
  plugins: [
    react(),
    tsConfigPaths(),
    linterPlugin({
      include: ["./src}/**/*.{ts,tsx}"],
      linters: [new EsLinter({ configEnv })]
    }),
    dts({
      include: ["src/lib/"]
    }),
    copy({
      targets: [{ src: "src/lib/constants/colors.scss", dest: "dist" }],
      hook: "writeBundle"
    })
  ],
  build: {
    lib: {
      entry: resolve("src", "lib/index.tsx"),
      name: "mylibrarycontainer",
      formats: ["es", "umd"],
      fileName: (format) => `mylibrarycontainer.${format}.js`
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies)]
    }
  }
}));
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRDpcXFxccHJvZmVzc2lvbmFsXFxcXGF0dGljYml0c1xcXFxmbG9kYVxcXFxyZWFjdCBwYWNrYWdlXFxcXG15bGlicmFyeWNvbnRhaW5lclxcXFxteWxpYnJhcnljb250YWluZXJcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkQ6XFxcXHByb2Zlc3Npb25hbFxcXFxhdHRpY2JpdHNcXFxcZmxvZGFcXFxccmVhY3QgcGFja2FnZVxcXFxteWxpYnJhcnljb250YWluZXJcXFxcbXlsaWJyYXJ5Y29udGFpbmVyXFxcXHZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9EOi9wcm9mZXNzaW9uYWwvYXR0aWNiaXRzL2Zsb2RhL3JlYWN0JTIwcGFja2FnZS9teWxpYnJhcnljb250YWluZXIvbXlsaWJyYXJ5Y29udGFpbmVyL3ZpdGUuY29uZmlnLnRzXCI7XHJcblxyXG5cclxuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcclxuaW1wb3J0IHJlYWN0IGZyb20gXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiO1xyXG5pbXBvcnQgZHRzIGZyb20gXCJ2aXRlLXBsdWdpbi1kdHNcIjtcclxuaW1wb3J0IHsgRXNMaW50ZXIsIGxpbnRlclBsdWdpbiB9ICBmcm9tIFwidml0ZS1wbHVnaW4tbGludGVyXCI7XHJcbmltcG9ydCB0c0NvbmZpZ1BhdGhzIGZyb20gXCJ2aXRlLXRzY29uZmlnLXBhdGhzXCI7XHJcbmltcG9ydCBjb3B5IGZyb20gXCJyb2xsdXAtcGx1Z2luLWNvcHlcIjtcclxuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gXCJub2RlOnBhdGhcIjtcclxuLy8gY29uc3QgPSBFc0xpbnQ7XHJcbmltcG9ydCAqIGFzIHBhY2thZ2VKc29uIGZyb20gXCIuL3BhY2thZ2UuanNvblwiO1xyXG5cclxuLy8gaHR0cHM6Ly92aXRlanMuZGV2L2NvbmZpZy9cclxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKChjb25maWdFbnYpID0+ICh7XHJcbiAgcGx1Z2luczogW1xyXG4gICAgcmVhY3QoKSxcclxuICAgIHRzQ29uZmlnUGF0aHMoKSxcclxuICAgIGxpbnRlclBsdWdpbih7XHJcbiAgICAgIGluY2x1ZGU6IFtcIi4vc3JjfS8qKi8qLnt0cyx0c3h9XCJdLFxyXG4gICAgICBsaW50ZXJzOiBbbmV3IEVzTGludGVyKHsgY29uZmlnRW52IH0pXSxcclxuICAgIH0pLFxyXG4gICAgZHRzKHtcclxuICAgICAgaW5jbHVkZTogW1wic3JjL2xpYi9cIl0sXHJcbiAgICB9KSxcclxuICAgIGNvcHkoe1xyXG4gICAgICB0YXJnZXRzOiBbeyBzcmM6IFwic3JjL2xpYi9jb25zdGFudHMvY29sb3JzLnNjc3NcIiwgZGVzdDogXCJkaXN0XCIgfV0sXHJcbiAgICAgIGhvb2s6ICd3cml0ZUJ1bmRsZSdcclxuICAgIH0pLFxyXG4gIF0sXHJcbiAgYnVpbGQ6IHtcclxuICAgIGxpYjoge1xyXG4gICAgICBlbnRyeTogcmVzb2x2ZShcInNyY1wiLCBcImxpYi9pbmRleC50c3hcIiksXHJcbiAgICAgIG5hbWU6IFwibXlsaWJyYXJ5Y29udGFpbmVyXCIsXHJcbiAgICAgIGZvcm1hdHM6IFtcImVzXCIsIFwidW1kXCJdLFxyXG4gICAgICBmaWxlTmFtZTogKGZvcm1hdCkgPT4gYG15bGlicmFyeWNvbnRhaW5lci4ke2Zvcm1hdH0uanNgLFxyXG4gICAgfSxcclxuICAgIHJvbGx1cE9wdGlvbnM6IHtcclxuICAgICAgZXh0ZXJuYWw6IFsuLi5PYmplY3Qua2V5cyhwYWNrYWdlSnNvbi5wZWVyRGVwZW5kZW5jaWVzKV0sXHJcbiAgICB9LFxyXG4gIH0sXHJcbn0pKTtcclxuIiwgIntcclxuICBcIm5hbWVcIjogXCJAc2h1YmhoYW1wZ2l0MDEvbXlsaWJyYXJ5Y29udGFpbmVyXCIsXHJcbiAgXCJ2ZXJzaW9uXCI6IFwiMC4xLjExXCIsXHJcbiAgXCJ0eXBlXCI6IFwibW9kdWxlXCIsXHJcbiAgXCJwdWJsaXNoQ29uZmlnXCI6IHtcclxuICAgIFwiQHNodWJoaGFtcGdpdDAxOnJlZ2lzdHJ5XCI6IFwiaHR0cHM6Ly9ucG0ucGtnLmdpdGh1Yi5jb21cIlxyXG4gIH0sXHJcbiAgXCJmaWxlc1wiOiBbXHJcbiAgICBcImRpc3RcIixcclxuICAgIFwiUkVBRE1FLm1kXCJcclxuICBdLFxyXG4gIFwibWFpblwiOiBcIi4vZGlzdC9teWxpYnJhcnljb250YWluZXIudW1kLmpzXCIsXHJcbiAgXCJzdHlsZVwiOiBcIi4vZGlzdC9zdHlsZS5tb2R1bGUuY3NzXCIsXHJcbiAgXCJtb2R1bGVcIjogXCIuL2Rpc3QvbXlsaWJyYXJ5Y29udGFpbmVyLmVzLmpzXCIsXHJcbiAgXCJ0eXBlc1wiOiBcIi4vZGlzdC9pbmRleC5kLnRzXCIsXHJcbiAgXCJleHBvcnRzXCI6IHtcclxuICAgIFwiLlwiOiB7XHJcbiAgICAgIFwiaW1wb3J0XCI6IFwiLi9kaXN0L215bGlicmFyeWNvbnRhaW5lci5lcy5qc1wiLFxyXG4gICAgICBcInJlcXVpcmVcIjogXCIuL2Rpc3QvbXlsaWJyYXJ5Y29udGFpbmVyLnVtZC5qc1wiLFxyXG4gICAgICBcInR5cGVzXCI6IFwiLi9kaXN0L2luZGV4LmQudHNcIixcclxuICAgICAgXCJzdHlsZVwiOiBcIi4vZGlzdC9zdHlsZS5tb2R1bGUuY3NzXCJcclxuICAgIH0sXHJcbiAgICBcIi4vZGlzdC9zdHlsZS5jc3NcIjoge1xyXG4gICAgICBcImltcG9ydFwiOiBcIi4vZGlzdC9zdHlsZS5jc3NcIixcclxuICAgICAgXCJyZXF1aXJlXCI6IFwiLi9kaXN0L3N0eWxlLmNzc1wiXHJcbiAgICB9LFxyXG4gICAgXCIuL2Rpc3QvY29sb3JzLnNjc3NcIjoge1xyXG4gICAgICBcImltcG9ydFwiOiBcIi4vZGlzdC9jb2xvcnMuc2Nzc1wiLFxyXG4gICAgICBcInJlcXVpcmVcIjogXCIuL2Rpc3QvY29sb3JzLnNjc3NcIlxyXG4gICAgfVxyXG4gIH0sXHJcbiAgXCJzY3JpcHRzXCI6IHtcclxuICAgIFwiZGV2XCI6IFwidml0ZVwiLFxyXG4gICAgXCJidWlsZFwiOiBcInRzYyAmJiB2aXRlIGJ1aWxkXCIsXHJcbiAgICBcImxpbnRcIjogXCJlc2xpbnQgLiAtLWV4dCB0cyx0c3ggLS1yZXBvcnQtdW51c2VkLWRpc2FibGUtZGlyZWN0aXZlcyAtLW1heC13YXJuaW5ncyAwXCIsXHJcbiAgICBcInByZXZpZXdcIjogXCJ2aXRlIHByZXZpZXdcIlxyXG4gIH0sXHJcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xyXG4gICAgXCJyZWFjdFwiOiBcIl4xOC4yLjBcIixcclxuICAgIFwicmVhY3QtZG9tXCI6IFwiXjE4LjIuMFwiLFxyXG4gICAgXCJyZWFjdC1yb3V0ZXItZG9tXCI6IFwiXjYuMjAuMVwiLFxyXG4gICAgXCJzYXNzXCI6IFwiXjEuNjkuNVwiXHJcbiAgfSxcclxuICBcImRldkRlcGVuZGVuY2llc1wiOiB7XHJcbiAgICBcIkB0eXBlcy9ub2RlXCI6IFwiXjIwLjEwLjRcIixcclxuICAgIFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE4LjIuMzdcIixcclxuICAgIFwiQHR5cGVzL3JlYWN0LWRvbVwiOiBcIl4xOC4yLjE1XCIsXHJcbiAgICBcIkB0eXBlc2NyaXB0LWVzbGludC9lc2xpbnQtcGx1Z2luXCI6IFwiXjYuMTAuMFwiLFxyXG4gICAgXCJAdHlwZXNjcmlwdC1lc2xpbnQvcGFyc2VyXCI6IFwiXjYuMTAuMFwiLFxyXG4gICAgXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiOiBcIl40LjMuMVwiLFxyXG4gICAgXCJlc2xpbnRcIjogXCJeOC41My4wXCIsXHJcbiAgICBcImVzbGludC1wbHVnaW4tcmVhY3QtaG9va3NcIjogXCJeNC42LjBcIixcclxuICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdC1yZWZyZXNoXCI6IFwiXjAuNC40XCIsXHJcbiAgICBcInJvbGx1cC1wbHVnaW4tY29weVwiOiBcIl4zLjUuMFwiLFxyXG4gICAgXCJ0eXBlc2NyaXB0XCI6IFwiXjUuMi4yXCIsXHJcbiAgICBcInZpdGVcIjogXCJeNS4wLjBcIixcclxuICAgIFwidml0ZS1wbHVnaW4tZHRzXCI6IFwiXjMuOS4xXCIsXHJcbiAgICBcInZpdGUtcGx1Z2luLWxpbnRlclwiOiBcIl4yLjEuMVwiLFxyXG4gICAgXCJ2aXRlLXRzY29uZmlnLXBhdGhzXCI6IFwiXjQuMy4yXCJcclxuICB9LFxyXG4gIFwicGVlckRlcGVuZGVuY2llc1wiOiB7XHJcbiAgICBcInJlYWN0XCI6IFwiXjE4LjIuMFwiLFxyXG4gICAgXCJyZWFjdC1kb21cIjogXCJeMTguMi4wXCIsXHJcbiAgICBcInJlYWN0LXJvdXRlci1kb21cIjogXCJeNi4yMC4xXCJcclxuICB9LFxyXG4gIFwicmVzb2x1dGlvbnNcIjoge1xyXG4gICAgXCJAdHlwZXMvcmVhY3RcIjogXCJeMTguMi4zN1wiLFxyXG4gICAgXCJAdHlwZXMvcmVhY3QtZG9tXCI6IFwiXjE4LjIuMTVcIlxyXG4gIH1cclxufVxyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBR0EsU0FBUyxvQkFBb0I7QUFDN0IsT0FBTyxXQUFXO0FBQ2xCLE9BQU8sU0FBUztBQUNoQixTQUFTLFVBQVUsb0JBQXFCO0FBQ3hDLE9BQU8sbUJBQW1CO0FBQzFCLE9BQU8sVUFBVTtBQUNqQixTQUFTLGVBQWU7OztBQ21EdEIsdUJBQW9CO0FBQUEsRUFDbEIsT0FBUztBQUFBLEVBQ1QsYUFBYTtBQUFBLEVBQ2Isb0JBQW9CO0FBQ3RCOzs7QURsREYsSUFBTyxzQkFBUSxhQUFhLENBQUMsZUFBZTtBQUFBLEVBQzFDLFNBQVM7QUFBQSxJQUNQLE1BQU07QUFBQSxJQUNOLGNBQWM7QUFBQSxJQUNkLGFBQWE7QUFBQSxNQUNYLFNBQVMsQ0FBQyxzQkFBc0I7QUFBQSxNQUNoQyxTQUFTLENBQUMsSUFBSSxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFBQSxJQUN2QyxDQUFDO0FBQUEsSUFDRCxJQUFJO0FBQUEsTUFDRixTQUFTLENBQUMsVUFBVTtBQUFBLElBQ3RCLENBQUM7QUFBQSxJQUNELEtBQUs7QUFBQSxNQUNILFNBQVMsQ0FBQyxFQUFFLEtBQUssaUNBQWlDLE1BQU0sT0FBTyxDQUFDO0FBQUEsTUFDaEUsTUFBTTtBQUFBLElBQ1IsQ0FBQztBQUFBLEVBQ0g7QUFBQSxFQUNBLE9BQU87QUFBQSxJQUNMLEtBQUs7QUFBQSxNQUNILE9BQU8sUUFBUSxPQUFPLGVBQWU7QUFBQSxNQUNyQyxNQUFNO0FBQUEsTUFDTixTQUFTLENBQUMsTUFBTSxLQUFLO0FBQUEsTUFDckIsVUFBVSxDQUFDLFdBQVcsc0JBQXNCLE1BQU07QUFBQSxJQUNwRDtBQUFBLElBQ0EsZUFBZTtBQUFBLE1BQ2IsVUFBVSxDQUFDLEdBQUcsT0FBTyxLQUFpQixnQkFBZ0IsQ0FBQztBQUFBLElBQ3pEO0FBQUEsRUFDRjtBQUNGLEVBQUU7IiwKICAibmFtZXMiOiBbXQp9Cg==
