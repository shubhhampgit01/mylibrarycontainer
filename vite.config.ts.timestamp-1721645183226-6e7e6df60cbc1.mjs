// vite.config.ts
import { defineConfig } from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/vite/dist/node/index.js";
import react from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/@vitejs/plugin-react/dist/index.mjs";
import dts from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/vite-plugin-dts/dist/index.mjs";
import { EsLinter, linterPlugin } from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/vite-plugin-linter/dist/index.mjs";
import tsConfigPaths from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/vite-tsconfig-paths/dist/index.mjs";
import copy from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/rollup-plugin-copy/dist/index.commonjs.js";
import { resolve } from "node:path";

// package.json
var peerDependencies = {
  react: "^18.2.0",
  "react-dom": "^18.2.0",
  "react-router-dom": "^6.20.1"
};

// vite.config.ts
var vite_config_default = defineConfig((configEnv) => ({
  plugins: [
    react(),
    tsConfigPaths(),
    linterPlugin({
      include: ["./src/**/*.{ts,tsx}"],
      linters: [new EsLinter({ configEnv })]
    }),
    dts({
      include: ["src/lib/"]
    }),
    copy({
      targets: [{ src: "src/lib/constants/colors.scss", dest: "dist" }],
      hook: "writeBundle"
    })
  ],
  build: {
    lib: {
      entry: resolve("src", "lib/index.tsx"),
      name: "mylibrarycontainer",
      formats: ["es", "umd"],
      fileName: (format) => `mylibrarycontainer.${format}.js`
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies)]
    }
  }
}));
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRDpcXFxccHJvZmVzc2lvbmFsXFxcXGF0dGljYml0c1xcXFxmbG9kYVxcXFxyZWFjdCBwYWNrYWdlXFxcXG15bGlicmFyeWNvbnRhaW5lclxcXFxteWxpYnJhcnljb250YWluZXJcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkQ6XFxcXHByb2Zlc3Npb25hbFxcXFxhdHRpY2JpdHNcXFxcZmxvZGFcXFxccmVhY3QgcGFja2FnZVxcXFxteWxpYnJhcnljb250YWluZXJcXFxcbXlsaWJyYXJ5Y29udGFpbmVyXFxcXHZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9EOi9wcm9mZXNzaW9uYWwvYXR0aWNiaXRzL2Zsb2RhL3JlYWN0JTIwcGFja2FnZS9teWxpYnJhcnljb250YWluZXIvbXlsaWJyYXJ5Y29udGFpbmVyL3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcclxuaW1wb3J0IHJlYWN0IGZyb20gXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiO1xyXG5pbXBvcnQgZHRzIGZyb20gXCJ2aXRlLXBsdWdpbi1kdHNcIjtcclxuaW1wb3J0IHsgRXNMaW50ZXIsIGxpbnRlclBsdWdpbiB9IGZyb20gXCJ2aXRlLXBsdWdpbi1saW50ZXJcIjtcclxuaW1wb3J0IHRzQ29uZmlnUGF0aHMgZnJvbSBcInZpdGUtdHNjb25maWctcGF0aHNcIjtcclxuaW1wb3J0IGNvcHkgZnJvbSBcInJvbGx1cC1wbHVnaW4tY29weVwiO1xyXG5cclxuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gXCJub2RlOnBhdGhcIjtcclxuaW1wb3J0ICogYXMgcGFja2FnZUpzb24gZnJvbSBcIi4vcGFja2FnZS5qc29uXCI7XHJcblxyXG4vLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL1xyXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoKGNvbmZpZ0VudikgPT4gKHtcclxuICBwbHVnaW5zOiBbXHJcbiAgICByZWFjdCgpLFxyXG4gICAgdHNDb25maWdQYXRocygpLFxyXG4gICAgbGludGVyUGx1Z2luKHtcclxuICAgICAgaW5jbHVkZTogW1wiLi9zcmMvKiovKi57dHMsdHN4fVwiXSxcclxuICAgICAgbGludGVyczogW25ldyBFc0xpbnRlcih7IGNvbmZpZ0VudiB9KV0sXHJcbiAgICB9KSxcclxuICAgIGR0cyh7XHJcbiAgICAgIGluY2x1ZGU6IFtcInNyYy9saWIvXCJdLFxyXG4gICAgfSksXHJcbiAgICBjb3B5KHtcclxuICAgICAgdGFyZ2V0czogW3sgc3JjOiBcInNyYy9saWIvY29uc3RhbnRzL2NvbG9ycy5zY3NzXCIsIGRlc3Q6IFwiZGlzdFwiIH1dLFxyXG4gICAgICBob29rOiAnd3JpdGVCdW5kbGUnLFxyXG4gICAgfSksXHJcbiAgXSxcclxuICBidWlsZDoge1xyXG4gICAgbGliOiB7XHJcbiAgICAgIGVudHJ5OiByZXNvbHZlKFwic3JjXCIsIFwibGliL2luZGV4LnRzeFwiKSxcclxuICAgICAgbmFtZTogXCJteWxpYnJhcnljb250YWluZXJcIixcclxuICAgICAgZm9ybWF0czogW1wiZXNcIiwgXCJ1bWRcIl0sXHJcbiAgICAgIGZpbGVOYW1lOiAoZm9ybWF0KSA9PiBgbXlsaWJyYXJ5Y29udGFpbmVyLiR7Zm9ybWF0fS5qc2AsXHJcbiAgICB9LFxyXG4gICAgcm9sbHVwT3B0aW9uczoge1xyXG4gICAgICBleHRlcm5hbDogWy4uLk9iamVjdC5rZXlzKHBhY2thZ2VKc29uLnBlZXJEZXBlbmRlbmNpZXMpXSxcclxuICAgIH0sXHJcbiAgfSxcclxufSkpO1xyXG4iLCAie1xyXG4gIFwibmFtZVwiOiBcIkBzaHViaGhhbXBnaXQwMS9teWxpYnJhcnljb250YWluZXJcIixcclxuICBcInZlcnNpb25cIjogXCIwLjEuM1wiLFxyXG4gIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxyXG4gIFwicHVibGlzaENvbmZpZ1wiOiB7XHJcbiAgICBcIkBzaHViaGhhbXBnaXQwMTpyZWdpc3RyeVwiOiBcImh0dHBzOi8vbnBtLnBrZy5naXRodWIuY29tXCJcclxuICB9LFxyXG4gIFwiZmlsZXNcIjogW1xyXG4gICAgXCJkaXN0XCIsXHJcbiAgICBcIlJFQURNRS5tZFwiXHJcbiAgXSxcclxuICBcIm1haW5cIjogXCIuL2Rpc3QvbXlsaWJyYXJ5Y29udGFpbmVyLnVtZC5qc1wiLFxyXG4gIFwic3R5bGVcIjogXCIuL2Rpc3Qvc3R5bGUubW9kdWxlLmNzc1wiLFxyXG4gIFwibW9kdWxlXCI6IFwiLi9kaXN0L215bGlicmFyeWNvbnRhaW5lci5lcy5qc1wiLFxyXG4gIFwidHlwZXNcIjogXCIuL2Rpc3QvaW5kZXguZC50c1wiLFxyXG4gIFwiZXhwb3J0c1wiOiB7XHJcbiAgICBcIi5cIjoge1xyXG4gICAgICBcImltcG9ydFwiOiBcIi4vZGlzdC9teWxpYnJhcnljb250YWluZXIuZXMuanNcIixcclxuICAgICAgXCJyZXF1aXJlXCI6IFwiLi9kaXN0L215bGlicmFyeWNvbnRhaW5lci51bWQuanNcIixcclxuICAgICAgXCJ0eXBlc1wiOiBcIi4vZGlzdC9pbmRleC5kLnRzXCIsXHJcbiAgICAgIFwic3R5bGVcIjogXCIuL2Rpc3Qvc3R5bGUubW9kdWxlLmNzc1wiXHJcbiAgICB9LFxyXG4gICAgXCIuL2Rpc3Qvc3R5bGUuY3NzXCI6IHtcclxuICAgICAgXCJpbXBvcnRcIjogXCIuL2Rpc3Qvc3R5bGUuY3NzXCIsXHJcbiAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC9zdHlsZS5jc3NcIlxyXG4gICAgfSxcclxuICAgIFwiLi9kaXN0L2NvbG9ycy5zY3NzXCI6IHtcclxuICAgICAgXCJpbXBvcnRcIjogXCIuL2Rpc3QvY29sb3JzLnNjc3NcIixcclxuICAgICAgXCJyZXF1aXJlXCI6IFwiLi9kaXN0L2NvbG9ycy5zY3NzXCJcclxuICAgIH1cclxuICB9LFxyXG4gIFwic2NyaXB0c1wiOiB7XHJcbiAgICBcImRldlwiOiBcInZpdGVcIixcclxuICAgIFwiYnVpbGRcIjogXCJ0c2MgJiYgdml0ZSBidWlsZFwiLFxyXG4gICAgXCJsaW50XCI6IFwiZXNsaW50IC4gLS1leHQgdHMsdHN4IC0tcmVwb3J0LXVudXNlZC1kaXNhYmxlLWRpcmVjdGl2ZXMgLS1tYXgtd2FybmluZ3MgMFwiLFxyXG4gICAgXCJwcmV2aWV3XCI6IFwidml0ZSBwcmV2aWV3XCJcclxuICB9LFxyXG4gIFwiZGVwZW5kZW5jaWVzXCI6IHtcclxuICAgIFwicmVhY3RcIjogXCJeMTguMi4wXCIsXHJcbiAgICBcInJlYWN0LWRvbVwiOiBcIl4xOC4yLjBcIixcclxuICAgIFwicmVhY3Qtcm91dGVyLWRvbVwiOiBcIl42LjIwLjFcIixcclxuICAgIFwic2Fzc1wiOiBcIl4xLjY5LjVcIlxyXG4gIH0sXHJcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xyXG4gICAgXCJAdHlwZXMvbm9kZVwiOiBcIl4yMC4xMC40XCIsXHJcbiAgICBcIkB0eXBlcy9yZWFjdFwiOiBcIl4xOC4yLjM3XCIsXHJcbiAgICBcIkB0eXBlcy9yZWFjdC1kb21cIjogXCJeMTguMi4xNVwiLFxyXG4gICAgXCJAdHlwZXNjcmlwdC1lc2xpbnQvZXNsaW50LXBsdWdpblwiOiBcIl42LjEwLjBcIixcclxuICAgIFwiQHR5cGVzY3JpcHQtZXNsaW50L3BhcnNlclwiOiBcIl42LjEwLjBcIixcclxuICAgIFwiQHZpdGVqcy9wbHVnaW4tcmVhY3RcIjogXCJeNC4zLjFcIixcclxuICAgIFwiZXNsaW50XCI6IFwiXjguNTMuMFwiLFxyXG4gICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0LWhvb2tzXCI6IFwiXjQuNi4wXCIsXHJcbiAgICBcImVzbGludC1wbHVnaW4tcmVhY3QtcmVmcmVzaFwiOiBcIl4wLjQuNFwiLFxyXG4gICAgXCJyb2xsdXAtcGx1Z2luLWNvcHlcIjogXCJeMy41LjBcIixcclxuICAgIFwidHlwZXNjcmlwdFwiOiBcIl41LjIuMlwiLFxyXG4gICAgXCJ2aXRlXCI6IFwiXjUuMC4wXCIsXHJcbiAgICBcInZpdGUtcGx1Z2luLWR0c1wiOiBcIl4zLjkuMVwiLFxyXG4gICAgXCJ2aXRlLXBsdWdpbi1saW50ZXJcIjogXCJeMi4xLjFcIixcclxuICAgIFwidml0ZS10c2NvbmZpZy1wYXRoc1wiOiBcIl40LjMuMlwiXHJcbiAgfSxcclxuICBcInBlZXJEZXBlbmRlbmNpZXNcIjoge1xyXG4gICAgXCJyZWFjdFwiOiBcIl4xOC4yLjBcIixcclxuICAgIFwicmVhY3QtZG9tXCI6IFwiXjE4LjIuMFwiLFxyXG4gICAgXCJyZWFjdC1yb3V0ZXItZG9tXCI6IFwiXjYuMjAuMVwiXHJcbiAgfSxcclxuICBcInJlc29sdXRpb25zXCI6IHtcclxuICAgIFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE4LjIuMzdcIixcclxuICAgIFwiQHR5cGVzL3JlYWN0LWRvbVwiOiBcIl4xOC4yLjE1XCJcclxuICB9XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUEyYixTQUFTLG9CQUFvQjtBQUN4ZCxPQUFPLFdBQVc7QUFDbEIsT0FBTyxTQUFTO0FBQ2hCLFNBQVMsVUFBVSxvQkFBb0I7QUFDdkMsT0FBTyxtQkFBbUI7QUFDMUIsT0FBTyxVQUFVO0FBRWpCLFNBQVMsZUFBZTs7O0FDcUR0Qix1QkFBb0I7QUFBQSxFQUNsQixPQUFTO0FBQUEsRUFDVCxhQUFhO0FBQUEsRUFDYixvQkFBb0I7QUFDdEI7OztBRHJERixJQUFPLHNCQUFRLGFBQWEsQ0FBQyxlQUFlO0FBQUEsRUFDMUMsU0FBUztBQUFBLElBQ1AsTUFBTTtBQUFBLElBQ04sY0FBYztBQUFBLElBQ2QsYUFBYTtBQUFBLE1BQ1gsU0FBUyxDQUFDLHFCQUFxQjtBQUFBLE1BQy9CLFNBQVMsQ0FBQyxJQUFJLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUFBLElBQ3ZDLENBQUM7QUFBQSxJQUNELElBQUk7QUFBQSxNQUNGLFNBQVMsQ0FBQyxVQUFVO0FBQUEsSUFDdEIsQ0FBQztBQUFBLElBQ0QsS0FBSztBQUFBLE1BQ0gsU0FBUyxDQUFDLEVBQUUsS0FBSyxpQ0FBaUMsTUFBTSxPQUFPLENBQUM7QUFBQSxNQUNoRSxNQUFNO0FBQUEsSUFDUixDQUFDO0FBQUEsRUFDSDtBQUFBLEVBQ0EsT0FBTztBQUFBLElBQ0wsS0FBSztBQUFBLE1BQ0gsT0FBTyxRQUFRLE9BQU8sZUFBZTtBQUFBLE1BQ3JDLE1BQU07QUFBQSxNQUNOLFNBQVMsQ0FBQyxNQUFNLEtBQUs7QUFBQSxNQUNyQixVQUFVLENBQUMsV0FBVyxzQkFBc0IsTUFBTTtBQUFBLElBQ3BEO0FBQUEsSUFDQSxlQUFlO0FBQUEsTUFDYixVQUFVLENBQUMsR0FBRyxPQUFPLEtBQWlCLGdCQUFnQixDQUFDO0FBQUEsSUFDekQ7QUFBQSxFQUNGO0FBQ0YsRUFBRTsiLAogICJuYW1lcyI6IFtdCn0K
