// vite.config.ts
import { defineConfig } from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/vite/dist/node/index.js";
import react from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/@vitejs/plugin-react/dist/index.mjs";
import dts from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/vite-plugin-dts/dist/index.mjs";
import { EsLinter, linterPlugin } from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/vite-plugin-linter/dist/index.mjs";
import tsConfigPaths from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/vite-tsconfig-paths/dist/index.mjs";
import copy from "file:///D:/professional/atticbits/floda/react%20package/mylibrarycontainer/mylibrarycontainer/node_modules/rollup-plugin-copy/dist/index.commonjs.js";
import { resolve } from "node:path";

// package.json
var peerDependencies = {
  react: "^18.2.0",
  "react-dom": "^18.2.0",
  "react-router-dom": "^6.20.1"
};

// vite.config.ts
var vite_config_default = defineConfig((configEnv) => ({
  plugins: [
    react(),
    tsConfigPaths(),
    linterPlugin({
      include: ["./src/**/*.{ts,tsx}"],
      linters: [new EsLinter({ configEnv })]
    }),
    dts({
      include: ["src/lib/"]
    }),
    copy({
      targets: [{ src: "src/lib/constants/colors.scss", dest: "dist" }],
      hook: "writeBundle"
    })
  ],
  build: {
    lib: {
      entry: resolve("src", "lib/index.tsx"),
      name: "mylibrarycontainer",
      formats: ["es", "umd"],
      fileName: (format) => `mylibrarycontainer.${format}.js`
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies)]
    }
  }
}));
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRDpcXFxccHJvZmVzc2lvbmFsXFxcXGF0dGljYml0c1xcXFxmbG9kYVxcXFxyZWFjdCBwYWNrYWdlXFxcXG15bGlicmFyeWNvbnRhaW5lclxcXFxteWxpYnJhcnljb250YWluZXJcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkQ6XFxcXHByb2Zlc3Npb25hbFxcXFxhdHRpY2JpdHNcXFxcZmxvZGFcXFxccmVhY3QgcGFja2FnZVxcXFxteWxpYnJhcnljb250YWluZXJcXFxcbXlsaWJyYXJ5Y29udGFpbmVyXFxcXHZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9EOi9wcm9mZXNzaW9uYWwvYXR0aWNiaXRzL2Zsb2RhL3JlYWN0JTIwcGFja2FnZS9teWxpYnJhcnljb250YWluZXIvbXlsaWJyYXJ5Y29udGFpbmVyL3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcclxuaW1wb3J0IHJlYWN0IGZyb20gXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiO1xyXG5pbXBvcnQgZHRzIGZyb20gXCJ2aXRlLXBsdWdpbi1kdHNcIjtcclxuaW1wb3J0IHsgRXNMaW50ZXIsIGxpbnRlclBsdWdpbiB9IGZyb20gXCJ2aXRlLXBsdWdpbi1saW50ZXJcIjtcclxuaW1wb3J0IHRzQ29uZmlnUGF0aHMgZnJvbSBcInZpdGUtdHNjb25maWctcGF0aHNcIjtcclxuaW1wb3J0IGNvcHkgZnJvbSBcInJvbGx1cC1wbHVnaW4tY29weVwiO1xyXG5cclxuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gXCJub2RlOnBhdGhcIjtcclxuaW1wb3J0ICogYXMgcGFja2FnZUpzb24gZnJvbSBcIi4vcGFja2FnZS5qc29uXCI7XHJcblxyXG4vLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL1xyXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoKGNvbmZpZ0VudikgPT4gKHtcclxuICBwbHVnaW5zOiBbXHJcbiAgICByZWFjdCgpLFxyXG4gICAgdHNDb25maWdQYXRocygpLFxyXG4gICAgbGludGVyUGx1Z2luKHtcclxuICAgICAgaW5jbHVkZTogW1wiLi9zcmMvKiovKi57dHMsdHN4fVwiXSxcclxuICAgICAgbGludGVyczogW25ldyBFc0xpbnRlcih7IGNvbmZpZ0VudiB9KV0sXHJcbiAgICB9KSxcclxuICAgIGR0cyh7XHJcbiAgICAgIGluY2x1ZGU6IFtcInNyYy9saWIvXCJdLFxyXG4gICAgfSksXHJcbiAgICBjb3B5KHtcclxuICAgICAgdGFyZ2V0czogW3sgc3JjOiBcInNyYy9saWIvY29uc3RhbnRzL2NvbG9ycy5zY3NzXCIsIGRlc3Q6IFwiZGlzdFwiIH1dLFxyXG4gICAgICBob29rOiBcIndyaXRlQnVuZGxlXCIsXHJcbiAgICB9KSxcclxuICBdLFxyXG4gIGJ1aWxkOiB7XHJcbiAgICBsaWI6IHtcclxuICAgICAgZW50cnk6IHJlc29sdmUoXCJzcmNcIiwgXCJsaWIvaW5kZXgudHN4XCIpLFxyXG4gICAgICBuYW1lOiBcIm15bGlicmFyeWNvbnRhaW5lclwiLFxyXG4gICAgICBmb3JtYXRzOiBbXCJlc1wiLCBcInVtZFwiXSxcclxuICAgICAgZmlsZU5hbWU6IChmb3JtYXQpID0+IGBteWxpYnJhcnljb250YWluZXIuJHtmb3JtYXR9LmpzYCxcclxuICAgIH0sXHJcbiAgICByb2xsdXBPcHRpb25zOiB7XHJcbiAgICAgIGV4dGVybmFsOiBbLi4uT2JqZWN0LmtleXMocGFja2FnZUpzb24ucGVlckRlcGVuZGVuY2llcyldLFxyXG4gICAgfSxcclxuICB9LFxyXG59KSk7XHJcbiIsICJ7XHJcbiAgXCJuYW1lXCI6IFwie0BzaHViaGhhbXBnaXQwMS9teWxpYnJhcnljb250YWluZXJ9XCIsXHJcbiAgXCJ2ZXJzaW9uXCI6IFwiMC4xLjVcIixcclxuICBcInR5cGVcIjogXCJtb2R1bGVcIixcclxuICBcInB1Ymxpc2hDb25maWdcIjoge1xyXG4gICAgXCJAc2h1YmhoYW1wZ2l0MDE6cmVnaXN0cnlcIjogXCJodHRwczovL25wbS5wa2cuZ2l0aHViLmNvbVwiXHJcbiAgfSxcclxuICBcImZpbGVzXCI6IFtcclxuICAgIFwiZGlzdFwiLFxyXG4gICAgXCJSRUFETUUubWRcIlxyXG4gIF0sXHJcbiAgXCJtYWluXCI6IFwiLi9kaXN0L215bGlicmFyeWNvbnRhaW5lci51bWQuanNcIixcclxuICBcInN0eWxlXCI6IFwiLi9kaXN0L3N0eWxlLm1vZHVsZS5jc3NcIixcclxuICBcIm1vZHVsZVwiOiBcIi4vZGlzdC9teWxpYnJhcnljb250YWluZXIuZXMuanNcIixcclxuICBcInR5cGVzXCI6IFwiLi9kaXN0L2luZGV4LmQudHNcIixcclxuICBcImV4cG9ydHNcIjoge1xyXG4gICAgXCIuXCI6IHtcclxuICAgICAgXCJpbXBvcnRcIjogXCIuL2Rpc3QvbXlsaWJyYXJ5Y29udGFpbmVyLmVzLmpzXCIsXHJcbiAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC9teWxpYnJhcnljb250YWluZXIudW1kLmpzXCIsXHJcbiAgICAgIFwidHlwZXNcIjogXCIuL2Rpc3QvaW5kZXguZC50c1wiLFxyXG4gICAgICBcInN0eWxlXCI6IFwiLi9kaXN0L3N0eWxlLm1vZHVsZS5jc3NcIlxyXG4gICAgfSxcclxuICAgIFwiLi9kaXN0L3N0eWxlLmNzc1wiOiB7XHJcbiAgICAgIFwiaW1wb3J0XCI6IFwiLi9kaXN0L3N0eWxlLmNzc1wiLFxyXG4gICAgICBcInJlcXVpcmVcIjogXCIuL2Rpc3Qvc3R5bGUuY3NzXCJcclxuICAgIH0sXHJcbiAgICBcIi4vZGlzdC9jb2xvcnMuc2Nzc1wiOiB7XHJcbiAgICAgIFwiaW1wb3J0XCI6IFwiLi9kaXN0L2NvbG9ycy5zY3NzXCIsXHJcbiAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC9jb2xvcnMuc2Nzc1wiXHJcbiAgICB9XHJcbiAgfSxcclxuICBcInNjcmlwdHNcIjoge1xyXG4gICAgXCJkZXZcIjogXCJ2aXRlXCIsXHJcbiAgICBcImJ1aWxkXCI6IFwidHNjICYmIHZpdGUgYnVpbGRcIixcclxuICAgIFwibGludFwiOiBcImVzbGludCAuIC0tZXh0IHRzLHRzeCAtLXJlcG9ydC11bnVzZWQtZGlzYWJsZS1kaXJlY3RpdmVzIC0tbWF4LXdhcm5pbmdzIDBcIixcclxuICAgIFwicHJldmlld1wiOiBcInZpdGUgcHJldmlld1wiXHJcbiAgfSxcclxuICBcImRlcGVuZGVuY2llc1wiOiB7XHJcbiAgICBcInJlYWN0XCI6IFwiXjE4LjIuMFwiLFxyXG4gICAgXCJyZWFjdC1kb21cIjogXCJeMTguMi4wXCIsXHJcbiAgICBcInJlYWN0LXJvdXRlci1kb21cIjogXCJeNi4yMC4xXCIsXHJcbiAgICBcInNhc3NcIjogXCJeMS42OS41XCJcclxuICB9LFxyXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcclxuICAgIFwiQHR5cGVzL25vZGVcIjogXCJeMjAuMTAuNFwiLFxyXG4gICAgXCJAdHlwZXMvcmVhY3RcIjogXCJeMTguMi4zN1wiLFxyXG4gICAgXCJAdHlwZXMvcmVhY3QtZG9tXCI6IFwiXjE4LjIuMTVcIixcclxuICAgIFwiQHR5cGVzY3JpcHQtZXNsaW50L2VzbGludC1wbHVnaW5cIjogXCJeNi4xMC4wXCIsXHJcbiAgICBcIkB0eXBlc2NyaXB0LWVzbGludC9wYXJzZXJcIjogXCJeNi4xMC4wXCIsXHJcbiAgICBcIkB2aXRlanMvcGx1Z2luLXJlYWN0XCI6IFwiXjQuMy4xXCIsXHJcbiAgICBcImVzbGludFwiOiBcIl44LjUzLjBcIixcclxuICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdC1ob29rc1wiOiBcIl40LjYuMFwiLFxyXG4gICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0LXJlZnJlc2hcIjogXCJeMC40LjRcIixcclxuICAgIFwicm9sbHVwLXBsdWdpbi1jb3B5XCI6IFwiXjMuNS4wXCIsXHJcbiAgICBcInR5cGVzY3JpcHRcIjogXCJeNS4yLjJcIixcclxuICAgIFwidml0ZVwiOiBcIl41LjAuMFwiLFxyXG4gICAgXCJ2aXRlLXBsdWdpbi1kdHNcIjogXCJeMy45LjFcIixcclxuICAgIFwidml0ZS1wbHVnaW4tbGludGVyXCI6IFwiXjIuMS4xXCIsXHJcbiAgICBcInZpdGUtdHNjb25maWctcGF0aHNcIjogXCJeNC4zLjJcIlxyXG4gIH0sXHJcbiAgXCJwZWVyRGVwZW5kZW5jaWVzXCI6IHtcclxuICAgIFwicmVhY3RcIjogXCJeMTguMi4wXCIsXHJcbiAgICBcInJlYWN0LWRvbVwiOiBcIl4xOC4yLjBcIixcclxuICAgIFwicmVhY3Qtcm91dGVyLWRvbVwiOiBcIl42LjIwLjFcIlxyXG4gIH0sXHJcbiAgXCJyZXNvbHV0aW9uc1wiOiB7XHJcbiAgICBcIkB0eXBlcy9yZWFjdFwiOiBcIl4xOC4yLjM3XCIsXHJcbiAgICBcIkB0eXBlcy9yZWFjdC1kb21cIjogXCJeMTguMi4xNVwiXHJcbiAgfVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBMmIsU0FBUyxvQkFBb0I7QUFDeGQsT0FBTyxXQUFXO0FBQ2xCLE9BQU8sU0FBUztBQUNoQixTQUFTLFVBQVUsb0JBQW9CO0FBQ3ZDLE9BQU8sbUJBQW1CO0FBQzFCLE9BQU8sVUFBVTtBQUVqQixTQUFTLGVBQWU7OztBQ3FEdEIsdUJBQW9CO0FBQUEsRUFDbEIsT0FBUztBQUFBLEVBQ1QsYUFBYTtBQUFBLEVBQ2Isb0JBQW9CO0FBQ3RCOzs7QURyREYsSUFBTyxzQkFBUSxhQUFhLENBQUMsZUFBZTtBQUFBLEVBQzFDLFNBQVM7QUFBQSxJQUNQLE1BQU07QUFBQSxJQUNOLGNBQWM7QUFBQSxJQUNkLGFBQWE7QUFBQSxNQUNYLFNBQVMsQ0FBQyxxQkFBcUI7QUFBQSxNQUMvQixTQUFTLENBQUMsSUFBSSxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFBQSxJQUN2QyxDQUFDO0FBQUEsSUFDRCxJQUFJO0FBQUEsTUFDRixTQUFTLENBQUMsVUFBVTtBQUFBLElBQ3RCLENBQUM7QUFBQSxJQUNELEtBQUs7QUFBQSxNQUNILFNBQVMsQ0FBQyxFQUFFLEtBQUssaUNBQWlDLE1BQU0sT0FBTyxDQUFDO0FBQUEsTUFDaEUsTUFBTTtBQUFBLElBQ1IsQ0FBQztBQUFBLEVBQ0g7QUFBQSxFQUNBLE9BQU87QUFBQSxJQUNMLEtBQUs7QUFBQSxNQUNILE9BQU8sUUFBUSxPQUFPLGVBQWU7QUFBQSxNQUNyQyxNQUFNO0FBQUEsTUFDTixTQUFTLENBQUMsTUFBTSxLQUFLO0FBQUEsTUFDckIsVUFBVSxDQUFDLFdBQVcsc0JBQXNCLE1BQU07QUFBQSxJQUNwRDtBQUFBLElBQ0EsZUFBZTtBQUFBLE1BQ2IsVUFBVSxDQUFDLEdBQUcsT0FBTyxLQUFpQixnQkFBZ0IsQ0FBQztBQUFBLElBQ3pEO0FBQUEsRUFDRjtBQUNGLEVBQUU7IiwKICAibmFtZXMiOiBbXQp9Cg==
